# vi:set wm=9 ai:

This page desecribes the rules we're using for this game.  Refer to it
as necessary to complete certain exercises:

https://www.bicyclecards.com/how-to-play/blackjack/

Topic: troubleshooting; good bug-fix technique
*. A black-box QA tester has submitted a bug report against your
   Blackjack game.  It reads as follows:

   "Bug #2253: Cards dealt are not unique"
   Steps to reproduce:
   1 run 'python3 game.py'
   2 select a username, press enter twice
   3 hit or stay
   4 Both cards are identical
   - program should give two different cards

   As the developer on this code, fix the problem by performing the
   following steps in order (all steps are required).  Each number is a
   separate exercise:
   A. Write a test that demonstrates the bug *before* changing any code
   B. Fix the code so that the new test passes
   C. Check in the code with a commit message that references the bug
      number, a brief description of the bug, and what you did to fix it
   D. run pylint

Topic: Test cleanup
*. The test for the game.py file, test/test_game.py, contains a lot of
   redundant code.  Replace all the repeated code with a setUp()
   function at the top of the test class. Make sure you can run the tests, and
   they all pass, before changing anything.
   run pylint

Topic: logging
*. Initialize a logger that logs to a file called "blackjack.log".  Add
   a log entry every time the game says something to the users,
   including who the game was addressing, and the text that was printed
   out. These log messages should be DEBUG.
   Add formatting so the time is displayed with the message
   run all tests
   run pylint

Topic: improving existing code; __str__() and __repr__()
*. Clean up game:print_cards().  The function doesn't print a very nice
   list of cards.  Modify it so that the list of cards returned is
   nicely formatted. You may need to modify the function, or you may
   need to modify the Card object.  Write a test to ensure that the
   output is what you expected -- you'll probably want to modify the
   function to return data rather than having the say() call inside the
   print_cards() function, for easier testing.
   run all tests
   run pylint

Topic: improving existing code: sorting
*. Implement the dunder methods necessary for sorting, and change str
   to return the cards 'in order'

Topic: @property decorator
*. In the Card class, the value() method would make more sense as a
   property (ie, call mycard.value instead of mycard.value()). First
   change the relevant test, make sure it fails, and then convert value
   into a class property using the @property decorator. Make sure you run
   all of the tests now. Do the tests find everything?
   run all tests
   run pylint
   p. 189, decorators; p. 607 properties;

Topic: @property decorator
*. In the Player class, the visible_cards() and all_cards() methods
   would also make sense as properties.  Use the @property decorator to
   make these into properties.  Run all tests with nose to see if
   changing from a method to a property has broken anything.  Update
   any code that doesn't work like it should.  If there are no tests
   that cover visible_cards() and all_cards, write tests to confirm
   that these are working as expected.
   run all tests
   run pylint
   commit and push code
